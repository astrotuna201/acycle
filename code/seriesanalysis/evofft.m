function [s,x_grid,y_grid] = evofft(data,window,step,dt,fmin,fmax,norm)%% USE:% [s,faxis,taxis] = evofft(data,mpts,inc,dt,fmin,fmax,unit)% Function to compute a running periodogram of a uniformly sampled time series% using FFTs of zero-padded segments.%% The output time-frequency running periodogram is plotted%% INPUT PARAMETERS% data--2 columns with independent, dependent variables of time series (time,value)% dt--data sample rate% window--window length for spectrogram (<< total data time), CAUTION: unit!% step--step increment (<< window)% fmin--minimum output f (>= 0)% fmax--maximum output f (<= Nyquist=1/2dt)% unit is the time unit of data, e.g. 'cm' or 'kyr' (default)%% CALCULATED PARAMETERS:% kpts = 4* mpts --padded FFT length of windows (for frequency interpolation)% df = 1/(kpts*dt) --output frequency bin rate% npts = length(xdata)% nspec = (npts-mpts)/inc +1 --number of output spectra, must be a round number% kfs = (fmax-fmin)/df+1 -- number of points per output spectrum%% OUTPUT PARAMETERS:  %%% s -- 2 columns, each row contains one spectrum (fmin thru fmax by df)% written by Linda Hinnov and Florian Maurer in 2002; update Brian Zurek,% 2007, update Mingsong Li in 2013% 2018, debug Mingsong Li in 2018%------------------------------------------------------------------------------------x=[ ];sx=[ ];s=[ ];taxis=[ ];time=data(:,1);xdata=data(:,2);mpts=window/dt;mpts=round(mpts);inc=step/dt;inc=round(inc);kpts=4*mpts;df=1./(kpts*dt);kfs=(fmax-fmin)/df+1;kmin=(fmin/df)+1;kmin=round(kmin);kmax=kmin+kfs-1;npts=length(xdata);nspec=round(npts-mpts)/inc+1; % number of spectra to be calculatedfor n=1:nspec    m1=inc*(n-1)+1;    m2=m1+mpts-1;    taxis(n)=(m1+(mpts/2)-1)*dt;            for m=m1:m2            j=m-m1+1;            x(j)=xdata(m);            end    x=detrend(x);    sx=fft(x,kpts);sxlen = length(sx);		for k=kmin:kmax            if k > sxlen                break            end            k1=k-kmin+1;            s(n,k1)=sqrt(sx(k)*conj(sx(k)));        end        ends=real(s); % prepares spectrogram for plotting%% add the bellow sentenceif norm == 1    maxval=[ ];        maxval=max(s');    for i=1:nspec;        s(i,:)=s(i,:)/maxval(i);    endendx_grid = linspace(fmin,fmax,kfs);%% y_grid=(time(1)+window/2):step:(time(1)+window/2+(nrow-1)*sign*step); % Original scripts%y_grid = (time(1)+window/2):step:(time(1)+window/2+(nspec-1)*step); % Mingsong Li, 21Oct2016% Ensure x_grid and y_grid has the same dimention as s |  Mingsong Li 2018[srow, scol] = size(s);  % size of sif length(x_grid) ~= scol    x_grid = linspace(fmin,fmax,scol);end%if length(y_grid) ~= srow    %y_grid = linspace((time(1)+window/2), (time(1)+window/2+(nspec-1)*step), srow);y_grid = linspace((time(1)+window/2), (time(end)-window/2), srow); % debug%end